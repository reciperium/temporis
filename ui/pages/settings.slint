import {
    AboutSlint,
    Button,
    VerticalBox,
    ProgressIndicator,
    Spinner,
    Palette,
    StyleMetrics,
    HorizontalBox,
    LineEdit,
    Switch,
    ScrollView,
} from "std-widgets.slint";
import {ExternalSystem, Interval, System} from "../globals.slint";
import { Link } from "../components/link.slint";
import { HorizontalDivider } from "../components/divider.slint";

export component Settings {
    callback navigate(page: int);

    key-handler-set := FocusScope {
        key-pressed(event) => {
            if (event.text == "b") {
                navigate(0);
            }
            accept
        }
    }

    height: 100%;
    width: 100%;
    ScrollView {
        VerticalBox {
            alignment: space-around;

            HorizontalLayout {
                alignment: start;
                Button {
                    icon: @image-url("../../assets/icons/left.svg");
                    colorize-icon: true;
                    clicked() => {
                        navigate(0);
                    }
                }
            }

            GridLayout {
                spacing-horizontal: 10px;
                spacing-vertical: 20px;

                Row {
                    Text {

                        text: @tr("Interval duration");
                        vertical-alignment: center;
                    }

                    LineEdit {
                        width: 40pt;
                        placeholder-text: @tr("Interval duration");
                        input-type: number;
                        text: ExternalSystem.focus_duration / 60;
                        edited(text) => {
                            ExternalSystem.focus_duration = text.to-float() * 60;
                            ExternalSystem.save_focus(ExternalSystem.focus_duration);
                        }
                    }
                }

                Row {
                    Text {
                        text: @tr("Short break duration");
                        vertical-alignment: center;
                    }

                    LineEdit {
                        width: 40pt;
                        placeholder-text: @tr("Short break duration");
                        input-type: number;
                        text: ExternalSystem.short_break_duration / 60;
                        edited(text) => {
                            ExternalSystem.short_break_duration = text.to-float() * 60;
                            ExternalSystem.save_focus(ExternalSystem.short_break_duration);
                        }
                    }
                }

                Row {
                    Text {
                        text: @tr("Long break duration");
                        vertical-alignment: center;
                    }

                    LineEdit {
                        width: 40pt;
                        placeholder-text: @tr("Long break duration");
                        input-type: number;
                        text: ExternalSystem.long_break_duration / 60;
                        edited(text) => {
                            ExternalSystem.long_break_duration = text.to-float() * 60;
                            ExternalSystem.save_focus(ExternalSystem.long_break_duration);
                        }
                    }
                }

                Row {
                    Text {
                        text: @tr("Sessions before long break");
                        vertical-alignment: center;
                    }

                    LineEdit {
                        width: 40pt;
                        placeholder-text: @tr("Sessions before long break");
                        input-type: number;
                        text: ExternalSystem.sessions;
                        edited(text) => {
                            ExternalSystem.sessions = text.to-float() * 60;
                            ExternalSystem.save_focus(ExternalSystem.sessions);
                        }
                    }
                }

                Row {
                    Text {
                        text: @tr("Maximum number of cycles");
                        vertical-alignment: center;
                    }

                    LineEdit {
                        width: 40pt;
                        placeholder-text: @tr("Number of cycles");
                        input-type: number;
                        text: ExternalSystem.cycles;
                        edited(text) => {
                            ExternalSystem.cycles = text.to-float();
                            ExternalSystem.save_cycles(ExternalSystem.long_break_duration);
                        }
                    }
                }

                Row {
                    Switch {
                        text: @tr("Notifications");
                        checked: ExternalSystem.enable_notifications;
                        toggled() => {
                            ExternalSystem.enable_notifications = self.checked;
                            ExternalSystem.save_enable_notifications(ExternalSystem.enable_notifications);
                        }
                    }
                }

                Row {
                    Switch {
                        text: @tr("Always show notifications");
                        checked: ExternalSystem.enable_notifications && ExternalSystem.critical_notifications;
                        toggled() => {
                            ExternalSystem.critical_notifications = self.checked;
                            ExternalSystem.save_critical_notifications(ExternalSystem.critical_notifications);
                        }
                    }
                }

                Row {
                    Switch {
                        text: @tr("Tick sound");
                        checked: ExternalSystem.tick_sound;
                        toggled() => {
                            ExternalSystem.tick_sound = self.checked;
                            ExternalSystem.save_tick_sound(ExternalSystem.tick_sound);
                        }
                    }
                }

                Row {
                    Switch {
                        text: @tr("End session sound");
                        checked: ExternalSystem.end_sound;
                        toggled() => {
                            ExternalSystem.end_sound = self.checked;
                            ExternalSystem.save_end_sound(ExternalSystem.end_sound);
                        }
                    }
                }
            }

            HorizontalDivider { }

            popup := PopupWindow {
                x: (parent.width - self.width) / 2;
                y: (parent.height - self.height) / 2;

                width: 90%;
                Rectangle {
                    border-color: Palette.border;
                    border-width: 1pt;
                    background: Palette.background;
                    VerticalBox {
                        alignment: center;
                        spacing: 15pt;
                        HorizontalLayout {
                            alignment: center;
                            spacing: 5pt;
                            Text {
                                text: @tr("Copyright");
                            }

                            Link {
                                horizontal-alignment: center;
                                text: "reciperium.com";
                                url: "https://reciperium.com";
                                vertical-alignment: center;
                            }
                        }

                        Text {
                            text: @tr("Author: Santiago Fraire Willemoes");
                            horizontal-alignment: center;
                        }

                        Text {
                            horizontal-alignment: center;
                            text: @tr("Version: 0.6.1");
                        }

                        Text {
                            horizontal-alignment: center;
                            text: @tr("License GNU GPL v3");
                        }

                        Text {
                            text: @tr("temporis-logo Â© 2025 by Lara Sitruk is licensed under CC BY 4.0");
                            wrap: TextWrap.word-wrap;
                            horizontal-alignment: center;
                        }
                    }
                }
            }

            Button {
                text: "About";
                colorize-icon: true;
                clicked() => {
                    popup.show();
                }
            }
        }
    }
}
