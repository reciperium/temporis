import {
    AboutSlint,
    Button,
    VerticalBox,
    ProgressIndicator,
    Spinner,
    Palette,
    StyleMetrics,
    HorizontalBox,
    LineEdit,
    Switch,
    ScrollView,
} from "std-widgets.slint";
import {ExternalSystem, Interval, System} from "../globals.slint";
import { Link } from "../components/link.slint";
import { HorizontalDivider } from "../components/divider.slint";

export component Settings {
    callback navigate(page: int);

    key-handler-set := FocusScope {
        key-pressed(event) => {
            if (event.text == "b") {
                navigate(0);
            }
            accept
        }
    }

    height: 100%;
    width: 100%;
    ScrollView {
        VerticalBox {
            alignment: space-around;

            HorizontalLayout {
                alignment: start;
                Button {
                    icon: @image-url("../../assets/icons/left.svg");
                    colorize-icon: true;
                    clicked() => {
                        navigate(0);
                    }
                }
            }

            GridLayout {
                spacing-horizontal: 10px;
                spacing-vertical: 20px;

                Row {
                    Text {

                        text: "Interval duration";
                        vertical-alignment: center;
                    }

                    LineEdit {
                        width: 40pt;
                        placeholder-text: "Interval duration";
                        input-type: number;
                        text: ExternalSystem.focus_duration / 60;
                        edited(text) => {
                            ExternalSystem.focus_duration = text.to-float() * 60;
                            ExternalSystem.save_focus(ExternalSystem.focus_duration);
                        }
                    }
                }

                Row {
                    Text {
                        text: "Short break duration";
                        vertical-alignment: center;
                    }

                    LineEdit {
                        width: 40pt;
                        placeholder-text: "Short break duration";
                        input-type: number;
                        text: ExternalSystem.short_break_duration / 60;
                        edited(text) => {
                            ExternalSystem.short_break_duration = text.to-float() * 60;
                            ExternalSystem.save_focus(ExternalSystem.short_break_duration);
                        }
                    }
                }

                Row {
                    Text {
                        text: "Long break duration";
                        vertical-alignment: center;
                    }

                    LineEdit {
                        width: 40pt;
                        placeholder-text: "Long break duration";
                        input-type: number;
                        text: ExternalSystem.long_break_duration / 60;
                        edited(text) => {
                            ExternalSystem.long_break_duration = text.to-float() * 60;
                            ExternalSystem.save_focus(ExternalSystem.long_break_duration);
                        }
                    }
                }

                Row {
                    Text {
                        text: "Sessions before long break";
                        vertical-alignment: center;
                    }

                    LineEdit {
                        width: 40pt;
                        placeholder-text: "Sessions before long break";
                        input-type: number;
                        text: ExternalSystem.sessions;
                        edited(text) => {
                            ExternalSystem.sessions = text.to-float() * 60;
                            ExternalSystem.save_focus(ExternalSystem.sessions);
                        }
                    }
                }

                Row {
                    Switch {
                        text: "Notifications";
                        checked: ExternalSystem.enable_notifications;
                        toggled() => {
                            ExternalSystem.enable_notifications = self.checked;
                            ExternalSystem.save_enable_notifications(ExternalSystem.enable_notifications);
                        }
                    }
                }

                Row {
                    Switch {
                        text: "Always show notifications";
                        checked: ExternalSystem.enable_notifications && ExternalSystem.critical_notifications;
                        toggled() => {
                            ExternalSystem.critical_notifications = self.checked;
                            ExternalSystem.save_critical_notifications(ExternalSystem.critical_notifications);
                        }
                    }
                }

                Row {
                    Switch {
                        text: "Tick sound";
                        checked: ExternalSystem.tick_sound;
                        toggled() => {
                            ExternalSystem.tick_sound = self.checked;
                            ExternalSystem.save_tick_sound(ExternalSystem.tick_sound);
                        }
                    }
                }
            }

            HorizontalDivider { }

            VerticalBox {
                alignment: center;
                spacing: 15pt;

                Link {
                    text: "reciperium.com";
                    url: "https://reciperium.com";
                    vertical-alignment: center;
                }

                Text {
                    text: "temporis-logo Â© 2025 by Lara Sitruk is licensed under CC BY 4.0";
                    wrap: TextWrap.word-wrap;
                }
            }
        }
    }
}
