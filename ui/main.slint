import {
    AboutSlint,
    Button,
    VerticalBox,
    ProgressIndicator,
    Spinner,
    Palette,
    StyleMetrics,
    HorizontalBox,
    LineEdit,
} from "std-widgets.slint";
import { ExternalSystem, Interval, System } from "./globals.slint";
import { Pomodoro } from "./pages/pomodoro.slint";
import { Settings } from "./pages/settings.slint";
import { LinkEvent } from "./components/link.slint";

export {
    ExternalSystem, Interval, LinkEvent
}

export component AppWindow inherits Window {
    min-width: 250pt;
    min-height: 400pt;
    icon: @image-url("../assets/icons/logo.svg");
    title: "Temporis";

    in-out property <int> current_page: 0;

    function navigate(page: int) {
        root.current_page = page;
    }

    timer := Timer {
        interval: 1s;
        running: System.running;
        triggered() => {
            System.value -= 1;
            ExternalSystem.tick(System.status);
            // Update progress every 10 seconds
            if (mod(System.value, 10) == 0) {
                ExternalSystem.update_progress(1 - System.value / System.getDuration(System.status));
            }
            if (System.value == 0) {
                System.next()
            }
        }
    }

    key-handler := FocusScope {
        key-pressed(event) => {
            if (event.text == "s") {
                System.toggleStart();
            }
            if (event.text == "r") {
                System.reset();
            }
            if (event.text == "k") {
                System.next();
            }
            if (event.text == "c") {
                navigate(1);
            }
            if (event.text == "b") {
                navigate(0);
            }
            if (event.modifiers.control && event.text == "q") {
                ExternalSystem.exit()
            }
            accept
        }
    }

    if (root.current_page == 0): Pomodoro {
        navigate(page) => {
            root.current_page = page;
        }
    }
    if (root.current_page == 1): Settings {
        navigate(page) => {
            root.current_page = page;
        }
    }
}
