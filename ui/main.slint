import {
    AboutSlint,
    Button,
    VerticalBox,
    ProgressIndicator,
    Spinner,
    Palette,
    StyleMetrics,
    HorizontalBox, LineEdit
} from "std-widgets.slint";


export enum Interval {
    Focus, ShortBreak, LongBreak
}

struct Message {
    summary: string,
    body: string,
}

export global System {
    in-out property <int> focus_duration: 1500; // 25 minutes
    in-out property <int> short_break_duration: 300; // 5 minutes
    in-out property <int> long_break_duration: 1200; // 20 minutes
    in-out property <int> sessions: 4;

    callback notify(message: Message);

    callback save_focus(value: int);
    callback save_short_break(value: int);
    callback save_long_break(value: int);
    callback save_sessions(value: int);

    pure public function getDuration(counter: Interval) -> int {
        if (counter == Interval.Focus) {
            // return 1500; // 25 minutes
            return System.focus_duration;
        } else if (counter == Interval.ShortBreak) {
            // return 300; // 5 minutes
            return System.short_break_duration;
        } else {
            // return 1200; // 20 minutes
            return System.long_break_duration;
        }
    }
}

export component Pomodoro {
    callback navigate(page: int);
    property <bool> started: false;
    property <Interval> status: Interval.Focus;
    property <int> value: System.getDuration(status);
    property <int> sessionCount: 1;

    property <[Message]> focus_messages: [
        {
            summary: "Interval Ended",
            body: "Time for a breather! Hydrate with some water and stretch a bit"
        },
        {
            summary: "Interval Ended",
            body: "Great work! Stand up, walk around, or do a few quick exercises to recharge"
        },
        {
            summary: "Interval Ended",
            body: "Step away from the screen; perhaps grab a drink or stretch"
        },
        {
            summary: "Interval Ended",
            body: "Break time! How about a short walk or some light stretching to clear your head?"
        },
    ];
    property <[Message]> short_break_messages: [
        { summary: "Break Ended", body: "Time to focus again! Keep up the good work!" },
        { summary: "Break Ended", body: "Great job! Let's get back to work!" },
        { summary: "Break Ended", body: "Ready to dive back in? Let's go!" },
        { summary: "Break Ended", body: "Focus time again. You got this!" },
    ];
    property <[Message]> long_break_messages: [
        {
            summary: "Break Ended",
            body: "Time to get back to it. You're refreshed and ready!"
        },
        { summary: "Break Ended", body: "Long break's done. What's next on your to-do list?" },
        { summary: "Break Ended", body: "Feeling recharged? Let's finish strong!" },
        { summary: "Break Ended", body: "Focus time again. You got this!" },
    ];
    property <int> message_count: 0;
    pure function nextMessage(finished_interval: Interval) -> Message {
        if finished_interval == Interval.Focus {
            return focus_messages[mod(sessionCount, 3)];
        } else if finished_interval == Interval.ShortBreak {

            return short_break_messages[mod(sessionCount, 3)];
        } else if finished_interval == Interval.LongBreak {

            return long_break_messages[mod(sessionCount, 3)];
        }
        return { summary: "Error", body: "Unexpected interval detected" };
    }

    pure function nextInterval(interval: Interval, sessionCount: int) -> Interval {
        if (interval == Interval.LongBreak || interval == Interval.ShortBreak) {
            return Interval.Focus;
        } else if (interval == Interval.Focus) {
            if (mod(sessionCount, 5) == 0) {
                return Interval.LongBreak;
            } else {
                return Interval.ShortBreak;
            }
        }
        return Interval.Focus;
    }

    pure function intervalToString(interval: Interval) -> string {
        if (interval == Interval.Focus) {
            return "Focus";
        } else if (interval == Interval.ShortBreak) {
            return "Short Break";
        } else {
            return "Long Break";
        }
    }

    pure function displayTime(seconds: int) -> string {
        floor(seconds / 60) + ":" + (mod(seconds, 60) / 1 < 10 ? "0" : "") + floor(mod(seconds, 60) / 1)
    }
    function toggleStart() {
        if value > 0 {
            timer.running = !timer.running;
        }
        // Only on start we set the root.started variable to true
        if (!root.started) {
            root.started = true;
        }
    }
    function reset() {
        status = Interval.Focus;
        sessionCount = 1;
        value = System.getDuration(Interval.Focus);
        timer.running = false;
        root.started = false;
    }

    function next() {
        if status == Interval.Focus {
            sessionCount = sessionCount + 1;
        }
        System.notify(nextMessage(status));
        status = nextInterval(status, sessionCount);
        value = System.getDuration(status);
    }

    key-handler := FocusScope {
        key-pressed(event) => {
            if (event.text == "s") {
                toggleStart();
            }
            if (event.text == "r") {
                reset();
            }
            if (event.text == "k") {
                next();
            }
            if (event.text == "c") {
                navigate(1);
            }
            accept
        }
    }

    timer := Timer {
        interval: 1s;
        running: false;
        triggered() => {
            value -= 1;
            if (value == 0) {
                next()
            }
        }
    }

    VerticalBox {

        alignment: center;
        spacing: 20px;

        HorizontalBox {
            alignment: end;
            Button {
                text: "Settings";
                icon: @image-url("./icons/settings.svg");
                colorize-icon: true;
                clicked() => {
                    navigate(1);
                }
            }
        }

        HorizontalBox {
            alignment: center;
            Text {
                text: intervalToString(status);
                font-size: 20pt;
            }
        }

        HorizontalBox {
            alignment: center;
            VerticalBox {
                Text {
                    text: displayTime(value);
                    font-size: 40pt;
                    color: Palette.accent-background;
                    font-weight: 600;
                }
            }
        }

        ProgressIndicator {
            progress: 1 - value / System.getDuration(status);
        }

        HorizontalBox {
            alignment: center;
            Text {
                visible: status == Interval.Focus;
                text: "Session " + sessionCount;
            }
        }

        HorizontalBox {
            alignment: center;
            spacing: 5px;
            Button {
                text: timer.running ? "Pause" : root.started ? "Continue" : "Start";
                icon: timer.running ? @image-url("./icons/pause.svg") : @image-url("./icons/play.svg");
                colorize-icon: true;
                clicked() => {
                    toggleStart();
                }
            }

            Button {
                text: "Reset";
                icon: @image-url("./icons/reset.svg");
                colorize-icon: true;

                enabled: root.started;
                clicked() => {
                    reset();
                }
            }

            Button {
                text: "Skip";
                icon: @image-url("./icons/skip.svg");
                colorize-icon: true;
                enabled: root.started;
                clicked() => {
                    next();
                }
            }
        }
    }
}

export component Settings {
    callback navigate(page: int);

    key-handler-set := FocusScope {
        key-pressed(event) => {
            if (event.text == "b") {
                navigate(0);
            }
            accept
        }
    }

    VerticalBox {
        alignment: space-between;

        Button {
            text: "Back";
            icon: @image-url("./icons/left.svg");
            colorize-icon: true;
            clicked() => {
                navigate(0);
            }
        }

        VerticalLayout {
            spacing: 5px;
            Text {
                text: "Interval duration";
            }

            HorizontalLayout {

                LineEdit {
                    placeholder-text: "Interval duration";
                    input-type: number;
                    text: System.focus_duration / 60;
                    width: 50%;
                    edited(text) => {
                        System.focus_duration = text.to-float() * 60;
                        System.save_focus(System.focus_duration);
                    }
                }
            }
        }

        VerticalLayout {
            spacing: 5px;
            Text {
                text: "Short break duration";
            }

            LineEdit {
                placeholder-text: "Short break duration";
                input-type: number;
                text: System.short_break_duration / 60;
                edited(text) => {
                    System.short_break_duration = text.to-float() * 60;
                    System.save_focus(System.short_break_duration);
                }
            }
        }

        VerticalLayout {
            spacing: 5px;
            Text {
                text: "Long break duration";
            }

            LineEdit {
                placeholder-text: "Long break duration";
                input-type: number;
                text: System.long_break_duration / 60;
                edited(text) => {
                    System.long_break_duration = text.to-float() * 60;
                    System.save_focus(System.long_break_duration);
                }
            }
        }

        VerticalLayout {
            spacing: 5px;
            Text {
                text: "Sessions before long break";
            }

            LineEdit {
                placeholder-text: "Sessions before long break";
                input-type: number;
                text: System.sessions;
                edited(text) => {
                    System.sessions = text.to-float() * 60;
                    System.save_focus(System.sessions);
                }
            }
        }

        HorizontalBox { }
    }
}

export component AppWindow inherits Window {
    min-width: 300px;
    min-height: 450px;
    icon: @image-url("./icons/logo.svg");
    title: "Temporis";

    in-out property <int> current_page: 0;

    if (root.current_page == 0): Pomodoro {
        navigate(page) => {
            root.current_page = page;
        }
    }
    if (root.current_page == 1): Settings {
        navigate(page) => {
            root.current_page = page;
        }
    }
}
