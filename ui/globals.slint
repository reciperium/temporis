export enum Interval {
    Focus, ShortBreak, LongBreak
}

export struct Message {
    summary: string,
    body: string,
    critical: bool,
}

export global ExternalSystem {
    // default values
    in-out property <int> focus_duration: 1500; // 25 minutes
    in-out property <int> short_break_duration: 300; // 5 minutes
    in-out property <int> long_break_duration: 1200; // 20 minutes
    in-out property <int> sessions: 4;
    in-out property <bool> bypass_dnd: true;

    callback notify(message: Message);
    callback save_focus(value: int);
    callback save_short_break(value: int);
    callback save_long_break(value: int);
    callback save_sessions(value: int);
    callback save_bypass_dnd(value: bool);
    callback update_progress(progress: float);
    callback stop_progress();
}

export global System {
    // global values
    in-out property <Interval> status: Interval.Focus;
    in-out property <int> value: System.getDuration(status);
    in-out property <bool> started: false;
    in-out property <int> sessionCount: 1;
    in-out property <bool> running: false;

    out property <[Message]> focus_messages: [
        {
            summary: "Interval Ended",
            body: "Time for a breather! Hydrate with some water and stretch a bit",
            critical: ExternalSystem.bypass_dnd,
        },
        {
            summary: "Interval Ended",
            body: "Great work! Stand up, walk around, or do a few quick exercises to recharge",
            critical: ExternalSystem.bypass_dnd,
        },
        {
            summary: "Interval Ended",
            body: "Step away from the screen; perhaps grab a drink or stretch",
            critical: ExternalSystem.bypass_dnd,
        },
        {
            summary: "Interval Ended",
            body: "Break time! How about a short walk or some light stretching to clear your head?",
            critical: ExternalSystem.bypass_dnd,
        },
    ];
    out property <[Message]> short_break_messages: [
        {
            summary: "Break Ended",
            body: "Time to focus again! Keep up the good work!",
            critical: ExternalSystem.bypass_dnd
        },
        {
            summary: "Break Ended",
            body: "Great job! Let's get back to work!",
            critical: ExternalSystem.bypass_dnd
        },
        {
            summary: "Break Ended",
            body: "Ready to dive back in? Let's go!",
            critical: ExternalSystem.bypass_dnd
        },
        {
            summary: "Break Ended",
            body: "Focus time again. You got this!",
            critical: ExternalSystem.bypass_dnd
        },
    ];
    out property <[Message]> long_break_messages: [
        {
            summary: "Break Ended",
            body: "Time to get back to it. You're refreshed and ready!"
        },
        { summary: "Break Ended", body: "Long break's done. What's next on your to-do list?" },
        { summary: "Break Ended", body: "Feeling recharged? Let's finish strong!" },
        { summary: "Break Ended", body: "Focus time again. You got this!" },
    ];
    in-out property <int> message_count: 0;

    pure public function getDuration(counter: Interval) -> int {
        if (counter == Interval.Focus) {
            // return 1500; // 25 minutes
            return ExternalSystem.focus_duration;
        } else if (counter == Interval.ShortBreak) {
            // return 300; // 5 minutes
            return ExternalSystem.short_break_duration;
        } else {
            // return 1200; // 20 minutes
            return ExternalSystem.long_break_duration;
        }
    }

    pure function nextMessage(finished_interval: Interval) -> Message {
        if finished_interval == Interval.Focus {
            return System.focus_messages[mod(System.sessionCount, 3)];
        } else if finished_interval == Interval.ShortBreak {

            return System.short_break_messages[mod(System.sessionCount, 3)];
        } else if finished_interval == Interval.LongBreak {

            return System.long_break_messages[mod(System.sessionCount, 3)];
        }
        return {
            summary: "Error",
            body: "Unexpected interval detected",
            critical: ExternalSystem.bypass_dnd
        };
    }

    public function next() {
        if System.status == Interval.Focus {
            System.sessionCount = System.sessionCount + 1;
        }
        ExternalSystem.notify(nextMessage(System.status));
        System.status = System.nextInterval(System.status, System.sessionCount);
        System.value = System.getDuration(System.status);
        ExternalSystem.stop_progress();
    }

    pure function nextInterval(interval: Interval, sessionCount: int) -> Interval {
        if (interval == Interval.LongBreak || interval == Interval.ShortBreak) {
            return Interval.Focus;
        } else if (interval == Interval.Focus) {
            if (mod(sessionCount, 5) == 0) {
                return Interval.LongBreak;
            } else {
                return Interval.ShortBreak;
            }
        }
        return Interval.Focus;
    }

    public function toggleStart() {
        if System.value > 0 {
            System.running = !System.running;
        }
        // Only on start we set the started variable to true
        if (!System.started) {
            System.started = true;
        }
    }
    public function reset() {
        System.status = Interval.Focus;
        System.sessionCount = 1;
        System.value = System.getDuration(Interval.Focus);
        System.running = false;
        System.started = false;
        ExternalSystem.stop_progress();
    }
}
